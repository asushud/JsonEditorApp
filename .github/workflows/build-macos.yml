name: Build macOS app (jlink + jpackage)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Show Java
        run: java -version

      - name: Compile Java files
        run: |
          rm -rf build
          mkdir -p build
          # compile all .java into build directory (adjust path if your sources are in a folder)
          javac -cp ".:jackson-core.jar:jackson-databind.jar:jackson-annotations.jar" -d build *.java

      - name: Create main JAR and prepare input folder
        run: |
          mkdir -p input
          # create the main jar (entry point JsonEditor - adjust if your main class is packaged)
          jar cfe JsonEditor.jar JsonEditor -C build .
          # copy jar and dependency jars into input (jpackage will include all jars in input on the classpath)
          cp JsonEditor.jar input/
          cp jackson-core.jar input/ || true
          cp jackson-databind.jar input/ || true
          cp jackson-annotations.jar input/ || true

      - name: Create custom runtime image with jlink (include java.desktop)
        run: |
          rm -rf custom-jre
          # include modules that GUI apps commonly need (add other modules if your app uses them)
          $JAVA_HOME/bin/jlink \
            --module-path $JAVA_HOME/jmods \
            --add-modules java.base,java.logging,java.xml,java.desktop \
            --output custom-jre \
            --compress=2 \
            --no-header-files \
            --no-man-pages

      - name: Run jpackage to create .dmg and .app
        run: |
          mkdir -p pkg-output
          # create a DMG (also produces JsonEditor.app in pkg-output)
          $JAVA_HOME/bin/jpackage \
            --name JsonEditor \
            --input input \
            --main-jar JsonEditor.jar \
            --main-class JsonEditor \
            --type dmg \
            --app-version 1.0 \
            --runtime-image custom-jre \
            --dest pkg-output \
            --verbose

      - name: List outputs
        run: ls -la pkg-output || true

      - name: Zip the produced app and dmg for artifacts
        run: |
          mkdir -p artifacts
          if [ -d "pkg-output/JsonEditor.app" ]; then
            ditto -c -k --sequesterRsrc --keepParent "pkg-output/JsonEditor.app" "artifacts/JsonEditor.app.zip"
          fi
          if [ -f "pkg-output/JsonEditor-1.0.dmg" ]; then
            cp "pkg-output/JsonEditor-1.0.dmg" artifacts/
          fi
          ls -la artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: JsonEditor-macOS
          path: artifacts
