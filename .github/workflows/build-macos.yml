name: Build and Sign macOS Native Image (.app)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup GraalVM 17
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm-community'
          components: 'native-image'

      - name: Build JAR
        run: |
          javac -cp ".:jackson-core.jar:jackson-databind.jar:jackson-annotations.jar" JsonEditor.java
          jar cfe JsonEditor-fat.jar JsonEditor *.class

      - name: Build Native Image
        run: |
          native-image \
            --no-fallback \
            --enable-http \
            --enable-https \
            --initialize-at-build-time \
            --report-unsupported-elements-at-runtime \
            -H:Name=JsonEditor \
            -H:ReflectionConfigurationFiles=reflect-config.json \
            -cp "JsonEditor-fat.jar:jackson-core.jar:jackson-databind.jar:jackson-annotations.jar" JsonEditor

          mkdir -p dist/JsonEditor.app/Contents/MacOS
          mv JsonEditor dist/JsonEditor.app/Contents/MacOS/JsonEditor
          echo "APPL????" > dist/JsonEditor.app/Contents/PkgInfo
          mkdir -p dist/JsonEditor.app/Contents/Resources
          cp icon.icns dist/JsonEditor.app/Contents/Resources/ 2>/dev/null || true
          cat <<EOF > dist/JsonEditor.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key> <string>JsonEditor</string>
            <key>CFBundleExecutable</key> <string>JsonEditor</string>
            <key>CFBundleIdentifier</key> <string>com.yourdomain.jsoneditor</string>
            <key>CFBundleVersion</key> <string>1.0</string>
            <key>CFBundlePackageType</key> <string>APPL</string>
          </dict>
          </plist>
          EOF

      # Import Developer Certificate
      - name: Import signing certificate
        env:
          MAC_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
        run: |
          echo "$MAC_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p github build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p github build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$MAC_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k github build.keychain

      # Code sign
      - name: Code sign .app
        run: |
          codesign --deep --force --options runtime --verify --verbose \
            --sign "Developer ID Application: YOUR_NAME (${APPLE_TEAM_ID})" \
            dist/JsonEditor.app

      # Zip for notarization
      - name: Zip app
        run: cd dist && zip -r JsonEditor.zip JsonEditor.app

      # Notarize app
      - name: Notarize app
        run: |
          xcrun notarytool submit dist/JsonEditor.zip \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait

      # Staple ticket
      - name: Staple notarization ticket
        run: xcrun stapler staple dist/JsonEditor.app

      # Upload artifact
      - name: Upload notarized app
        uses: actions/upload-artifact@v4
        with:
          name: JsonEditor-macos-app
          path: dist/JsonEditor.zip
