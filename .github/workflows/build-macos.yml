name: Build JsonEditor Apps

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # ü™ü Windows Build
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 1Ô∏è‚É£ Compile Java files
      - name: Compile Java files
        run: |
          mkdir build
          javac -cp ".;jackson-core.jar;jackson-databind.jar;jackson-annotations.jar" -d build *.java

      # 2Ô∏è‚É£ Create fat jar with proper extraction
      - name: Create fat jar
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force fat-jar -ErrorAction SilentlyContinue
          mkdir fat-jar

          # Copy compiled classes
          Copy-Item build\* fat-jar\ -Recurse

          # Extract dependencies without extra folders
          foreach ($jar in "jackson-core.jar","jackson-databind.jar","jackson-annotations.jar") {
              Write-Host "Extracting $jar"
              $tempDir = "$env:TEMP\jartemp"
              Remove-Item -Recurse -Force $tempDir -ErrorAction SilentlyContinue
              mkdir $tempDir
              [System.IO.Compression.ZipFile]::ExtractToDirectory($jar, $tempDir)

              Get-ChildItem $tempDir -Recurse | Where-Object {
                  $_.PSIsContainer -or ($_.Extension -eq ".class")
              } | ForEach-Object {
                  $relative = $_.FullName.Substring($tempDir.Length + 1) -replace '^mp\\',''
                  $dest = Join-Path fat-jar $relative
                  $destDir = Split-Path $dest -Parent
                  if (-not (Test-Path $destDir)) { mkdir $destDir }
                  Copy-Item $_.FullName $dest -Force
              }

              Remove-Item -Recurse -Force $tempDir
          }

          # Create final fat jar
          cd fat-jar
          jar cfe ../JsonEditor-fat.jar JsonEditor *
          cd ..

      # 3Ô∏è‚É£ Create custom runtime image
      - name: Create runtime image
        run: |
          jlink `
            --module-path "$env:JAVA_HOME\jmods" `
            --add-modules java.base,java.desktop,java.logging,java.xml `
            --output jre

      # 4Ô∏è‚É£ Prepare input folder for jpackage
      - name: Prepare input folder
        run: |
          Remove-Item -Recurse -Force build-input -ErrorAction SilentlyContinue
          mkdir build-input
          Copy-Item JsonEditor-fat.jar build-input\

      # 5Ô∏è‚É£ Clean output folder
      - name: Clean output folder
        run: Remove-Item -Recurse -Force output -ErrorAction SilentlyContinue

      # 6Ô∏è‚É£ Package Windows EXE
      - name: Package Windows EXE
        run: |
          jpackage `
            --name JsonEditor `
            --input build-input `
            --main-jar JsonEditor-fat.jar `
            --main-class JsonEditor `
            --runtime-image jre `
            --type app-image `
            --win-console `
            --app-version 1.0 `
            --dest output

      # 7Ô∏è‚É£ Upload Windows artifact
      - name: Upload Windows app-image
        uses: actions/upload-artifact@v4
        with:
          name: JsonEditor-Windows
          path: output/JsonEditor

  # üçé macOS Build
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 1Ô∏è‚É£ Compile Java files
      - name: Compile Java files
        run: javac -cp ".:jackson-core.jar:jackson-databind.jar:jackson-annotations.jar" -d build *.java

      # 2Ô∏è‚É£ Create fat jar
      - name: Create fat jar
        run: |
          rm -rf fat-jar
          mkdir fat-jar
          cp -R build/* fat-jar/

          for jar in jackson-core.jar jackson-databind.jar jackson-annotations.jar; do
            tempDir=$(mktemp -d)
            unzip -q "$jar" -d "$tempDir"
            find "$tempDir" -name '*.class' -exec cp --parents {} fat-jar/ \;
            rm -rf "$tempDir"
          done

          cd fat-jar
          jar cfe ../JsonEditor-fat.jar JsonEditor *
          cd ..

      # 3Ô∏è‚É£ Clean output folder
      - name: Clean output folder
        run: rm -rf output

      # 4Ô∏è‚É£ Package macOS DMG
      - name: Package macOS App
        run: |
          mkdir -p output
          jpackage \
            --name JsonEditor \
            --input . \
            --main-jar JsonEditor-fat.jar \
            --main-class JsonEditor \
            --type dmg \
            --app-version 1.0 \
            --dest output

      # 5Ô∏è‚É£ Upload macOS artifact
      - name: Upload macOS App artifact
        uses: actions/upload-artifact@v4
        with:
          name: JsonEditor-macOS
          path: output/
